rust_code = """
// Define the Customer struct
struct Customer {
    name: String,
    surname: String,
    balance: f64,
}

// Define the Product struct
struct Product {
    name: String,
    price: f64,
    stock: u32,
}

// Implementing methods for Customer struct
impl Customer {
    // Function for purchasing a product
    fn buy_product(&mut self, product: &mut Product, quantity: u32) -> bool {
        let total_price = product.price * quantity as f64;

        // Check if the customer has enough balance and the product has enough stock
        if self.balance >= total_price && product.stock >= quantity {
            // Update customer balance and product stock
            self.balance -= total_price;
            product.stock -= quantity;
            true
        } else {
            false
        }
    }
}

// Main program
fn main() {
    // Create sample customers
    let mut customer1 = Customer {
        name: String::from("Alice"),
        surname: String::from("Smith"),
        balance: 100.0,
    };

    let mut customer2 = Customer {
        name: String::from("Bob"),
        surname: String::from("Johnson"),
        balance: 50.0,
    };

    // Create a sample product
    let mut product = Product {
        name: String::from("Laptop"),
        price: 30.0,
        stock: 10,
    };

    // Customer 1 buys a product
    println!("Customer 1 is buying 3 units of the product...");
    if customer1.buy_product(&mut product, 3) {
        println!("Customer 1 successfully purchased the product.");
        println!("Remaining balance: ${}", customer1.balance);
        println!("Remaining stock: {}", product.stock);
    } else {
        println!("Customer 1 couldn't purchase the product.");
    }

    // Customer 2 buys a product
    println!("Customer 2 is buying 8 units of the product...");
    if customer2.buy_product(&mut product, 8) {
        println!("Customer 2 successfully purchased the product.");
        println!("Remaining balance: ${}", customer2.balance);
        println!("Remaining stock: {}", product.stock);
    } else {
        println!("Customer 2 couldn't purchase the product.");
    }
}
"""

# Saving to file
file_path = "/mnt/data/market_simulation_rust.rs"
with open(file_path, "w") as file:
    file.write(rust_code)

file_path
